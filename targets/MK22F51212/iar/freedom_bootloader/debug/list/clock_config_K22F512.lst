###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       13/Mar/2016  16:46:12
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\src\clock_config_K22F512.c
#    Command line =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\src\clock_config_K22F512.c
#        -D NDEBUG -D CPU_MK22FN512VDC12 -D CPU_IS_ARM_CORTEX_M4=1 -D IAR -D
#        FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa050 -o
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program Files\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include/device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/uart\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/hid_device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/os/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/arch/cortex_m\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/soc/MK22F\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/common\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/hid\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/khci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/ehci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/hal\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list\clock_config_K22F512.lst
#    Object file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj\clock_config_K22F512.o
#
###############################################################################

C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\src\clock_config_K22F512.c
      1          /*
      2           * Copyright (c) 2014-2015, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "bootloader_common.h"
     32          #include "bootloader/context.h"
     33          #include "property/property.h"
     34          #include "device/fsl_device_registers.h"
     35          #include "utilities/fsl_assert.h"
     36          
     37          ////////////////////////////////////////////////////////////////////////////////
     38          // Definitions
     39          ////////////////////////////////////////////////////////////////////////////////
     40          
     41          // Clock mode types
     42          typedef enum _target_clock_mode
     43          {
     44              kClockMode_FEI = 0,
     45              kClockMode_FEE = 1,
     46              kClockMode_Default = kClockMode_FEI,
     47          }target_clock_mode_t;
     48          
     49          ////////////////////////////////////////////////////////////////////////////////
     50          // Prototypes
     51          ////////////////////////////////////////////////////////////////////////////////
     52          
     53          // This function implements clock mode switch between FEI and PEE mode used in this bootloader
     54          void clock_mode_switch(const target_clock_mode_t currentMode, const target_clock_mode_t expectedMode);
     55          
     56          ////////////////////////////////////////////////////////////////////////////////
     57          // Code
     58          ////////////////////////////////////////////////////////////////////////////////
     59          
     60          // See bootloader_common.h for documentation on this function.

   \                                 In section .text, align 2, keep-with-next
     61          void configure_clocks(bootloader_clock_option_t option)
     62          {
   \                     configure_clocks: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
     63          #if BL_TARGET_FLASH
     64              
     65              static target_clock_mode_t s_currentClockMode = kClockMode_FEI;
     66              static uint32_t s_defaultClockDivider;
     67              
     68              if (option == kClockOption_EnterBootloader)
   \   00000004   0x....             LDR.N    R4,??DataTable1
   \   00000006   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40048044
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0xD16F             BNE.N    ??configure_clocks_0
     69              {
     70                  s_defaultClockDivider = SIM->CLKDIV1;
   \   0000000E   0x6829             LDR      R1,[R5, #+0]
   \   00000010   0x6061             STR      R1,[R4, #+4]
     71                  
     72                  // General procedure to be implemented:
     73                  // 1. Read clock flags and divider from bootloader config in property store
     74                  bootloader_configuration_data_t * config = &g_bootloaderContext.propertyInterface->store->configurationData;
   \   00000012   0x....             LDR.N    R1,??DataTable1_2
   \   00000014   0x6889             LDR      R1,[R1, #+8]
   \   00000016   0x6909             LDR      R1,[R1, #+16]
   \   00000018   0xF101 0x0270      ADD      R2,R1,#+112
     75                  uint8_t options = config->clockFlags;
     76                  
     77                  // Check if the USB HID peripheral is enabled. If it is enabled, we always
     78                  // use the 48MHz IRC.
     79                  bool isUsbEnabled = config->enabledPeripherals & kPeripheralType_USB_HID;
   \   0000001C   0x7C11             LDRB     R1,[R2, #+16]
     80                  
     81                  // 2. If NOT High Speed and USB isn't enabled, do nothing (use reset clock config)
     82                  if ((options & kClockFlag_HighSpeed) && (!isUsbEnabled))
   \   0000001E   0x7F16             LDRB     R6,[R2, #+28]
   \   00000020   0x0909             LSRS     R1,R1,#+4
   \   00000022   0xF006 0x0601      AND      R6,R6,#0x1
   \   00000026   0xF001 0x0301      AND      R3,R1,#0x1
   \   0000002A   0xF083 0x0701      EOR      R7,R3,#0x1
   \   0000002E   0x423E             TST      R6,R7
   \   00000030   0x....             LDR.N    R1,??DataTable1_3
   \   00000032   0xD008             BEQ.N    ??configure_clocks_1
     83                  {
     84                      // Get actual Core clock.
     85                      SystemCoreClock = kDefaultClock / (SIM_BRD_CLKDIV1_OUTDIV1(SIM) + 1);
   \   00000034   0x682A             LDR      R2,[R5, #+0]
   \   00000036   0x0F12             LSRS     R2,R2,#+28
   \   00000038   0xF04F 0x70A0      MOV      R0,#+20971520
   \   0000003C   0x1C52             ADDS     R2,R2,#+1
   \   0000003E   0xFBB0 0xF0F2      UDIV     R0,R0,R2
   \   00000042   0x6008             STR      R0,[R1, #+0]
     86                      
     87                      // High speed flag is set (meaning disabled), so just use default clocks.
     88                      return;
   \   00000044   0xE05A             B.N      ??configure_clocks_2
     89                  }
     90                  
     91                  // 3. Set OUTDIV1 based on divider in config. OUTDIV4 starts out at /1.
     92                  // The divider values are masked by the maximum bits per divider.
     93                  uint32_t div1 = ((~config->clockDivider) & (SIM_CLKDIV1_OUTDIV1_MASK >> SIM_CLKDIV1_OUTDIV1_SHIFT)) + 1;
   \                     ??configure_clocks_1: (+1)
   \   00000046   0x7F52             LDRB     R2,[R2, #+29]
   \   00000048   0x43D2             MVNS     R2,R2
   \   0000004A   0xF002 0x020F      AND      R2,R2,#0xF
   \   0000004E   0x1C52             ADDS     R2,R2,#+1
     94                  
     95                  // 4. Get MCGOUTCLK
     96                  uint32_t McgOutClk = kHIRC;
     97                  
     98                  // 5. Keep core clock up kMinCoreClockWithUsbSupport if usb is supported.
     99                  uint32_t freq = McgOutClk;
    100                  // If USB is enabled, the CPU clock must not be allowed to go below 20 MHz
    101                  if (isUsbEnabled)
   \   00000050   0xB90B             CBNZ.N   R3,??configure_clocks_3
   \   00000052   0xE006             B.N      ??configure_clocks_4
    102                  {
    103                      while((freq / div1) < kMinCoreClockWithUsbSupport)
    104                      {
    105                          --div1;
   \                     ??configure_clocks_5: (+1)
   \   00000054   0x1E52             SUBS     R2,R2,#+1
    106                      }
   \                     ??configure_clocks_3: (+1)
   \   00000056   0x....             LDR.N    R3,??DataTable1_4  ;; 0x2dc6c00
   \   00000058   0x....             LDR.N    R6,??DataTable1_5  ;; 0x1312d00
   \   0000005A   0xFBB3 0xF3F2      UDIV     R3,R3,R2
   \   0000005E   0x42B3             CMP      R3,R6
   \   00000060   0xD3F8             BCC.N    ??configure_clocks_5
    107                  }
    108                  
    109                  // 6. Keep core clock below kMaxCoreClock
    110                  while ((freq / div1) > kMaxCoreClock)
   \                     ??configure_clocks_4: (+1)
   \   00000062   0x....             LDR.N    R3,??DataTable1_4  ;; 0x2dc6c00
   \   00000064   0x....             LDR.N    R6,??DataTable1_6  ;; 0x7270e01
   \   00000066   0xFBB3 0xF3F2      UDIV     R3,R3,R2
   \   0000006A   0x42B3             CMP      R3,R6
   \   0000006C   0xBF28             IT       CS 
   \   0000006E   0x1C52             ADDCS    R2,R2,#+1
    111                  {
    112                      ++div1;
   \   00000070   0xD2F7             BCS.N    ??configure_clocks_4
    113                  }
    114                  
    115                  assert((div1 >= kDivider_Min) && (div1 <= kDivider_Max));
    116                  
    117                  uint32_t div2 = div1;
   \   00000072   0x4694             MOV      R12,R2
    118                  uint32_t div3 = div1;
   \   00000074   0x4616             MOV      R6,R2
    119                  uint32_t div4 = div1;
   \   00000076   0x4617             MOV      R7,R2
    120                  
    121                  // 7. Keep bus freq below max.
    122                  //
    123                  // The bus clock is divided by OUTDIV2:
    124                  //      MCGOUTCLK -> OUTDIV2 -> bus_clk
    125                  freq = McgOutClk;
   \   00000078   0x.... 0x....      LDR.W    R8,??DataTable1_7  ;; 0x3938701
   \   0000007C   0xE001             B.N      ??configure_clocks_6
    126                  while ((freq / div2) > kMaxBusClock)
    127                  {
    128                      // Increase bus clock divider.
    129                      ++div2;
   \                     ??configure_clocks_7: (+1)
   \   0000007E   0xF10C 0x0C01      ADD      R12,R12,#+1
    130                  }
   \                     ??configure_clocks_6: (+1)
   \   00000082   0x.... 0x....      LDR.W    LR,??DataTable1_4  ;; 0x2dc6c00
   \   00000086   0xFBBE 0xFEFC      UDIV     LR,LR,R12
   \   0000008A   0x45C6             CMP      LR,R8
   \   0000008C   0xD2F7             BCS.N    ??configure_clocks_7
    131                  assert((div2 >= kDivider_Min) && (div2 <= kDivider_Max));
    132                  
    133                  // 8. Keep FlexBus freq below max.
    134                  //
    135                  // The FlexBus clock is divided by OUTDIV3:
    136                  // MCGOUTCLK -> OUTDIV3 -> flexbus_clk
    137                  freq = McgOutClk;
    138                  while ((freq / div3) > kMaxFlexBusClock)
   \                     ??configure_clocks_8: (+1)
   \   0000008E   0x.... 0x....      LDR.W    LR,??DataTable1_4  ;; 0x2dc6c00
   \   00000092   0x.... 0x....      LDR.W    R8,??DataTable1_8  ;; 0x2faf081
   \   00000096   0xFBBE 0xFEF6      UDIV     LR,LR,R6
   \   0000009A   0x45C6             CMP      LR,R8
   \   0000009C   0xBF28             IT       CS 
   \   0000009E   0x1C76             ADDCS    R6,R6,#+1
    139                  {
    140                      // Increase flexbus clock divider.
    141                      ++div3;
   \   000000A0   0xD2F5             BCS.N    ??configure_clocks_8
   \   000000A2   0xE000             B.N      ??configure_clocks_9
    142                  }
    143                  assert((div3 >= kDivider_Min) && (div3 <= kDivider_Max));
    144                  
    145                  // 9. Keep flash freq below max.
    146                  //
    147                  // The flash clock is diveded by OUTDIV4:
    148                  //      MCGOUTCLK -> OUTDIV4 ->flash_clk
    149                  freq = McgOutClk;
    150                  while ((freq / div4) > kMaxFlashClock)
    151                  {
    152                      // Increase bus/flash clock divider.
    153                      ++div4;
   \                     ??configure_clocks_10: (+1)
   \   000000A4   0x1C7F             ADDS     R7,R7,#+1
    154                  }
   \                     ??configure_clocks_9: (+1)
   \   000000A6   0x.... 0x....      LDR.W    LR,??DataTable1_4  ;; 0x2dc6c00
   \   000000AA   0x.... 0x....      LDR.W    R8,??DataTable1_9  ;; 0x17d7841
   \   000000AE   0xFBBE 0xFEF7      UDIV     LR,LR,R7
   \   000000B2   0x45C6             CMP      LR,R8
   \   000000B4   0xD2F6             BCS.N    ??configure_clocks_10
    155                  assert((div4 >= kDivider_Min) && (div4 <= kDivider_Max));
    156                  
    157                  if((div1 == 1) && ((div2 > 8) || (div3 > 8) || (div4 > 8)))
   \   000000B6   0x2A01             CMP      R2,#+1
   \   000000B8   0xD105             BNE.N    ??configure_clocks_11
   \   000000BA   0xF1BC 0x0F09      CMP      R12,#+9
   \   000000BE   0xBF3C             ITT      CC 
   \   000000C0   0x2E09             CMPCC    R6,#+9
   \   000000C2   0x2F09             CMPCC    R7,#+9
   \   000000C4   0xD21A             BCS.N    ??configure_clocks_2
    158                  {
    159                      return;
    160                  }
    161                  
    162                  // 9. Now set the dividers
    163                  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(div1 - 1) |
    164                                SIM_CLKDIV1_OUTDIV1(div1 - 1) |
    165                                SIM_CLKDIV1_OUTDIV2(div3 - 1) |
    166                                SIM_CLKDIV1_OUTDIV4(div4 - 1); /* Update system prescalers */
   \                     ??configure_clocks_11: (+1)
   \   000000C6   0x1E76             SUBS     R6,R6,#+1
   \   000000C8   0x0636             LSLS     R6,R6,#+24
   \   000000CA   0x1E52             SUBS     R2,R2,#+1
   \   000000CC   0xF006 0x6670      AND      R6,R6,#0xF000000
   \   000000D0   0xEA46 0x7202      ORR      R2,R6,R2, LSL #+28
   \   000000D4   0x1E7E             SUBS     R6,R7,#+1
   \   000000D6   0x0436             LSLS     R6,R6,#+16
   \   000000D8   0xF406 0x2670      AND      R6,R6,#0xF0000
   \   000000DC   0x4332             ORRS     R2,R6,R2
   \   000000DE   0x602A             STR      R2,[R5, #+0]
    167                  
    168                  // 10. Update SystemCoreClock global.
    169                  SystemCoreClock =  McgOutClk / div1;
   \   000000E0   0x600B             STR      R3,[R1, #+0]
    170                  
    171                  clock_mode_switch(s_currentClockMode, kClockMode_FEE);
   \   000000E2   0x2101             MOVS     R1,#+1
   \   000000E4   0x.... 0x....      BL       clock_mode_switch
    172                  s_currentClockMode = kClockMode_FEE;
   \   000000E8   0x2001             MOVS     R0,#+1
   \   000000EA   0x7020             STRB     R0,[R4, #+0]
   \   000000EC   0xE006             B.N      ??configure_clocks_2
    173              
    174              }
    175              else if (option == kClockOption_ExitBootloader)
   \                     ??configure_clocks_0: (+1)
   \   000000EE   0x2901             CMP      R1,#+1
   \   000000F0   0xD104             BNE.N    ??configure_clocks_2
    176              {
    177                   // Restore from FEE mode to FEI mode
    178                  clock_mode_switch(s_currentClockMode, kClockMode_FEI);
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x.... 0x....      BL       clock_mode_switch
    179                  
    180                  // Restore clock divider
    181                  SIM_CLKDIV1 = s_defaultClockDivider;
   \   000000F8   0x6860             LDR      R0,[R4, #+4]
   \   000000FA   0x6028             STR      R0,[R5, #+0]
    182              }
    183          
    184          #endif // BL_TARGET_FLASH
    185          }
   \                     ??configure_clocks_2: (+1)
   \   000000FC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??s_currentClockMode:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \   00000004                      DS8 4
    186          

   \                                 In section .text, align 2, keep-with-next
    187          void clock_mode_switch(const target_clock_mode_t currentMode, const target_clock_mode_t expectedMode)
    188          {
    189              // Note: here only implements clock switch between FEI and FEE, 
    190              // The other modes are not supported.
    191              assert (currentMode == kClockMode_FEE || currentMode == kClockMode_FEI);
    192              assert (expectedMode == kClockMode_FEE || expectedMode == kClockMode_FEI);
    193              
    194              if (currentMode == expectedMode)
   \                     clock_mode_switch: (+1)
   \   00000000   0x4288             CMP      R0,R1
   \   00000002   0xD042             BEQ.N    ??clock_mode_switch_0
    195              {
    196                  return;
    197              }
    198              
    199              if (expectedMode == kClockMode_FEE)
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable1_10  ;; 0x42c800d0
   \   00000008   0x....             LDR.N    R3,??DataTable1_11  ;; 0x42c80008
   \   0000000A   0x....             LDR.N    R2,??DataTable1_12  ;; 0x40064000
   \   0000000C   0xD125             BNE.N    ??clock_mode_switch_1
    200              {
    201                  /* Switch to FEE mode */
    202                  MCG_BWR_C2_RANGE(MCG, 2); /* MCG_C2: RANGE = 2 */
   \   0000000E   0x7851             LDRB     R1,[R2, #+1]
   \   00000010   0xF001 0x01CF      AND      R1,R1,#0xCF
   \   00000014   0xF041 0x0120      ORR      R1,R1,#0x20
   \   00000018   0x7051             STRB     R1,[R2, #+1]
    203                  MCG_BWR_C1_FRDIV(MCG, 6); // FRDIV=6, RANGE=2, divide IRC48M with 1280
   \   0000001A   0x7811             LDRB     R1,[R2, #+0]
   \   0000001C   0xF001 0x01C7      AND      R1,R1,#0xC7
   \   00000020   0xF041 0x0130      ORR      R1,R1,#0x30
   \   00000024   0x7011             STRB     R1,[R2, #+0]
    204                  
    205                  // This is required due to ERR007993
    206                  MCG_SET_C4(MCG, MCG_C4_DMX32_MASK);
   \   00000026   0x78D1             LDRB     R1,[R2, #+3]
   \   00000028   0xF041 0x0180      ORR      R1,R1,#0x80
   \   0000002C   0x70D1             STRB     R1,[R2, #+3]
    207                  
    208                  MCG_BWR_C1_IREFS(MCG, 0); // Switch to external reference clock.
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x7019             STRB     R1,[R3, #+0]
    209                  MCG_BWR_C7_OSCSEL(MCG, 2); // Select IRC48M as Oscillator
   \   00000032   0x7B11             LDRB     R1,[R2, #+12]
   \   00000034   0xF001 0x01FC      AND      R1,R1,#0xFC
   \   00000038   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000003C   0x7311             STRB     R1,[R2, #+12]
    210                  while (MCG_BRD_S_IREFST(MCG)); // Wait until external reference clock is ready.
   \                     ??clock_mode_switch_2: (+1)
   \   0000003E   0x7801             LDRB     R1,[R0, #+0]
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xD1FC             BNE.N    ??clock_mode_switch_2
    211                  // This is required due to ERR007993
    212                  MCG_CLR_C4(MCG, MCG_C4_DMX32_MASK);
   \   00000044   0x78D0             LDRB     R0,[R2, #+3]
   \   00000046   0xF000 0x007F      AND      R0,R0,#0x7F
   \   0000004A   0x70D0             STRB     R0,[R2, #+3]
    213                  
    214                  MCG_BWR_C4_DRST_DRS(MCG, 1); // Multiply with 1280, MCGOUTCLK is 48Mhz
   \   0000004C   0x78D0             LDRB     R0,[R2, #+3]
   \   0000004E   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000052   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000056   0x70D0             STRB     R0,[R2, #+3]
   \   00000058   0x4770             BX       LR
    215              }
    216              else if (expectedMode == kClockMode_FEI)
   \                     ??clock_mode_switch_1: (+1)
   \   0000005A   0xB9B1             CBNZ.N   R1,??clock_mode_switch_0
    217              {
    218                  // This is required due to ERR007993
    219                  MCG_SET_C4(MCG, MCG_C4_DMX32_MASK);
   \   0000005C   0x78D1             LDRB     R1,[R2, #+3]
   \   0000005E   0xF041 0x0180      ORR      R1,R1,#0x80
   \   00000062   0x70D1             STRB     R1,[R2, #+3]
    220                  
    221                  MCG_BWR_C1_IREFS(MCG, 1); // Switch to internal reference clock.
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x7019             STRB     R1,[R3, #+0]
    222                  while (!MCG_BRD_S_IREFST(MCG)); // Wait until internal reference clock is ready.
   \                     ??clock_mode_switch_3: (+1)
   \   00000068   0x7801             LDRB     R1,[R0, #+0]
   \   0000006A   0x2900             CMP      R1,#+0
   \   0000006C   0xD0FC             BEQ.N    ??clock_mode_switch_3
    223                  // This is required due to ERR007993
    224                  MCG_CLR_C4(MCG, MCG_C4_DMX32_MASK);
   \   0000006E   0x78D0             LDRB     R0,[R2, #+3]
   \   00000070   0xF000 0x007F      AND      R0,R0,#0x7F
   \   00000074   0x70D0             STRB     R0,[R2, #+3]
    225                  // Restore registers to default value out of reset.
    226                  MCG_WR_C1(MCG, 0x04);
   \   00000076   0x2004             MOVS     R0,#+4
   \   00000078   0x7010             STRB     R0,[R2, #+0]
    227                  MCG_WR_C2(MCG, 0x80);
   \   0000007A   0x2080             MOVS     R0,#+128
   \   0000007C   0x7050             STRB     R0,[R2, #+1]
    228                  MCG_BWR_C4_DRST_DRS(MCG, 0);   
   \   0000007E   0x78D0             LDRB     R0,[R2, #+3]
   \   00000080   0xF000 0x009F      AND      R0,R0,#0x9F
   \   00000084   0x70D0             STRB     R0,[R2, #+3]
    229                  MCG_WR_C7(MCG, 0); 
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x7310             STRB     R0,[R2, #+12]
    230              }
    231          }
   \                     ??clock_mode_switch_0: (+1)
   \   0000008A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ??s_currentClockMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     g_bootloaderContext

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x02DC6C00         DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x01312D00         DC32     0x1312d00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x07270E01         DC32     0x7270e01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x03938701         DC32     0x3938701

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x02FAF081         DC32     0x2faf081

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x017D7841         DC32     0x17d7841

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x42C800D0         DC32     0x42c800d0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x42C80008         DC32     0x42c80008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x40064000         DC32     0x40064000
    232          
    233          ////////////////////////////////////////////////////////////////////////////////
    234          // EOF
    235          ////////////////////////////////////////////////////////////////////////////////
    236          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   clock_mode_switch
      24   configure_clocks
        24   -> clock_mode_switch


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
     140  clock_mode_switch
     256  configure_clocks
       8  s_currentClockMode
          s_defaultClockDivider

 
   8 bytes in section .bss
 448 bytes in section .text
 
 448 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
