###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       13/Mar/2016  16:46:34
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\flash\src\flash_is_execute_only.c
#    Command line =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\flash\src\flash_is_execute_only.c
#        -D NDEBUG -D CPU_MK22FN512VDC12 -D CPU_IS_ARM_CORTEX_M4=1 -D IAR -D
#        FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa050 -o
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program Files\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include/device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/uart\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/hid_device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/os/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/arch/cortex_m\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/soc/MK22F\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/common\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/hid\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/khci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/ehci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/hal\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list\flash_is_execute_only.lst
#    Object file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj\flash_is_execute_only.o
#
###############################################################################

C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\flash\src\flash_is_execute_only.c
      1          /*
      2           * Copyright (c) 2014, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "SSD_FTFx_Common.h"
     32          #include "flash/flash.h"
     33          #include "fsl_platform_status.h"
     34          #include "fsl_platform_types.h"
     35          #include "device/fsl_device_registers.h"
     36          
     37          ////////////////////////////////////////////////////////////////////////////////
     38          // Code
     39          ////////////////////////////////////////////////////////////////////////////////
     40          
     41          // See flash.h for documentation of this function.

   \                                 In section .text, align 4, keep-with-next
     42          status_t flash_is_execute_only(flash_driver_t * driver, uint32_t start, uint32_t lengthInBytes,
     43                                      flash_execute_only_access_state_t * access_state)
     44          {
   \                     flash_is_execute_only: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x001E             MOVS     R6,R3
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4617             MOV      R7,R2
     45              if (access_state == NULL)
   \   0000000C   0xBF08             IT       EQ 
   \   0000000E   0x2004             MOVEQ    R0,#+4
     46              {
     47                  return kStatus_InvalidArgument;
   \   00000010   0xD034             BEQ.N    ??flash_is_execute_only_0
     48              }
     49          
     50              // Check the supplied address range.
     51              status_t returnCode = flash_check_range(driver, start, lengthInBytes, FSL_FEATURE_FLASH_PFLASH_BLOCK_WRITE_UNIT_SIZE);
   \   00000012   0x2304             MOVS     R3,#+4
   \   00000014   0x.... 0x....      BL       flash_check_range
     52              if (returnCode)
   \   00000018   0xBB80             CBNZ.N   R0,??flash_is_execute_only_0
     53              {
     54                  return returnCode;
     55              }
     56          
     57          #if !FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
     58              *access_state = kFlashAccess_UnLimited;
     59          #else
     60              uint32_t executeOnlySegmentCounter = 0;
     61          
     62              // calculating end address
     63              uint32_t endAddress = start + lengthInBytes;
     64          
     65              // Aligning start address and end address
     66              uint32_t alignedStartAddress = ALIGN_DOWN(start, driver->PFlashAccessSegmentSize);
     67              uint32_t alignedEndAddress = ALIGN_UP(endAddress, driver->PFlashAccessSegmentSize);
     68          
     69              uint32_t segmentIndex = 0;
     70              uint32_t maxSupportedExecuteOnlySegmentCount = (alignedEndAddress - alignedStartAddress) / driver->PFlashAccessSegmentSize;
   \   0000001A   0xF8D8 0x3014      LDR      R3,[R8, #+20]
   \   0000001E   0x197A             ADDS     R2,R7,R5
   \   00000020   0x425F             RSBS     R7,R3,#+0
   \   00000022   0xF1C2 0x0C00      RSB      R12,R2,#+0
   \   00000026   0xEA07 0x0C0C      AND      R12,R7,R12
   \   0000002A   0xF1CC 0x0C00      RSB      R12,R12,#+0
   \   0000002E   0x402F             ANDS     R7,R7,R5
   \   00000030   0xEBAC 0x0707      SUB      R7,R12,R7
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0xFBB7 0xF7F3      UDIV     R7,R7,R3
   \   0000003A   0xF8DF 0xC044      LDR.W    R12,??flash_is_execute_only_1  ;; 0x40020018
   \   0000003E   0xE00A             B.N      ??flash_is_execute_only_2
     71          
     72              while (start < endAddress)
     73              {
     74                  segmentIndex = start / driver->PFlashAccessSegmentSize;
     75          
     76                  uint32_t xacc;
     77                  if ( segmentIndex < 32)
     78                  {
     79                      xacc = *(uint32_t*)&FTFx->XACCL3;
     80                  }
     81                  else if (segmentIndex < driver->PFlashAccessSegmentCount)
     82                  {
     83                      xacc = *(uint32_t*)&FTFx->XACCH3;
   \                     ??flash_is_execute_only_3: (+1)
   \   00000040   0xF8DC 0xE000      LDR      LR,[R12, #+0]
     84                      segmentIndex -= 32;
   \   00000044   0x3C20             SUBS     R4,R4,#+32
     85                  }
     86                  else
     87                  {
     88                      break;
     89                  }
     90          
     91                  // Determine if this address range is in a execute-only protection flash segment.
     92                  if ( (~xacc) & (1 << segmentIndex))
   \                     ??flash_is_execute_only_4: (+1)
   \   00000046   0xEA6F 0x0E0E      MVN      LR,LR
   \   0000004A   0xFA2E 0xF404      LSR      R4,LR,R4
   \   0000004E   0x07E4             LSLS     R4,R4,#+31
   \   00000050   0xBF48             IT       MI 
   \   00000052   0x1C49             ADDMI    R1,R1,#+1
     93                  {
     94                       executeOnlySegmentCounter ++;
     95                  }
     96          
     97                  start += driver->PFlashAccessSegmentSize;
   \   00000054   0x195D             ADDS     R5,R3,R5
   \                     ??flash_is_execute_only_2: (+1)
   \   00000056   0x4295             CMP      R5,R2
   \   00000058   0xD20A             BCS.N    ??flash_is_execute_only_5
   \   0000005A   0xFBB5 0xF4F3      UDIV     R4,R5,R3
   \   0000005E   0x2C20             CMP      R4,#+32
   \   00000060   0xBF38             IT       CC 
   \   00000062   0xF8DC 0xE004      LDRCC    LR,[R12, #+4]
   \   00000066   0xD3EE             BCC.N    ??flash_is_execute_only_4
   \   00000068   0xF8D8 0xE018      LDR      LR,[R8, #+24]
   \   0000006C   0x4574             CMP      R4,LR
   \   0000006E   0xD3E7             BCC.N    ??flash_is_execute_only_3
     98              }
     99          
    100              if (executeOnlySegmentCounter < 1)
   \                     ??flash_is_execute_only_5: (+1)
   \   00000070   0xB119             CBZ.N    R1,??flash_is_execute_only_6
    101              {
    102                  *access_state = kFlashAccess_UnLimited;
    103              }
    104              else if(executeOnlySegmentCounter < maxSupportedExecuteOnlySegmentCount)
   \   00000072   0x42B9             CMP      R1,R7
   \   00000074   0xBF34             ITE      CC 
   \   00000076   0x2102             MOVCC    R1,#+2
   \   00000078   0x2101             MOVCS    R1,#+1
    105              {
    106                  *access_state = kFlashAccess_Mixed;
    107              }
    108              else
    109              {
    110                  *access_state = kFlashAccess_ExecuteOnly;
   \                     ??flash_is_execute_only_6: (+1)
   \   0000007A   0x7031             STRB     R1,[R6, #+0]
    111              }
    112          
    113          #endif // FSL_FEATURE_FLASH_HAS_ACCESS_CONTROL
    114          
    115            return(returnCode);
   \                     ??flash_is_execute_only_0: (+1)
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??flash_is_execute_only_1:
   \   00000080   0x40020018         DC32     0x40020018
    116          }
    117          ////////////////////////////////////////////////////////////////////////////////
    118          // EOF
    119          ////////////////////////////////////////////////////////////////////////////////
    120          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   flash_is_execute_only
        24   -> flash_check_range


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     132  flash_is_execute_only

 
 132 bytes in section .text
 
 132 bytes of CODE memory

Errors: none
Warnings: none
