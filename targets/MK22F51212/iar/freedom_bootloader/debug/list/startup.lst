###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       13/Mar/2016  16:47:39
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\startup\startup.c
#    Command line =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\startup\startup.c
#        -D NDEBUG -D CPU_MK22FN512VDC12 -D CPU_IS_ARM_CORTEX_M4=1 -D IAR -D
#        FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa050 -o
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program Files\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include/device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/uart\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/hid_device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/os/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/arch/cortex_m\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/soc/MK22F\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/common\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/hid\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/khci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/ehci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/hal\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list\startup.lst
#    Object file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj\startup.o
#
###############################################################################

C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\startup\startup.c
      1          /*
      2           * Copyright (c) 2013, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "fsl_platform_common.h"
     32          #include "device/fsl_device_registers.h"
     33          
     34          #if (defined(__ICCARM__))
     35              #pragma section = ".intvec"
     36              #pragma section = ".data"
     37              #pragma section = ".data_init"
     38              #pragma section = ".bss"
     39              #pragma section = "CodeRelocate"
     40              #pragma section = "CodeRelocateRam"
     41          #endif
     42          
     43          ////////////////////////////////////////////////////////////////////////////////
     44          // Code
     45          ////////////////////////////////////////////////////////////////////////////////
     46          
     47          /*FUNCTION**********************************************************************
     48           *
     49           * Function Name : init_data_bss
     50           * Description   : Make necessary initializations for RAM.
     51           * - Copy initialized data from ROM to RAM.
     52           * - Clear the zero-initialized data section.
     53           * - Copy the vector table from ROM to RAM. This could be an option.
     54           *
     55           * Tool Chians:
     56           *   __GNUC__   : GCC
     57           *   __CC_ARM   : KEIL
     58           *   __ICCARM__ : IAR
     59           *
     60           *END**************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          void init_data_bss(void)
     62          {
   \                     init_data_bss: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     63              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
     64          #if defined(__CC_ARM)
     65              extern uint32_t Image$$VECTOR_ROM$$Base[];
     66              extern uint32_t Image$$VECTOR_RAM$$Base[];
     67              extern uint32_t Image$$RW_m_data$$Base[];
     68          
     69              #define __VECTOR_TABLE Image$$VECTOR_ROM$$Base
     70              #define __VECTOR_RAM Image$$VECTOR_RAM$$Base
     71              #define __RAM_VECTOR_TABLE_SIZE (((uint32_t)Image$$RW_m_data$$Base - (uint32_t)Image$$VECTOR_RAM$$Base))
     72          #elif defined(__ICCARM__)
     73              extern uint32_t __RAM_VECTOR_TABLE_SIZE[];
     74              extern uint32_t __VECTOR_TABLE[];
     75              extern uint32_t __VECTOR_RAM[];
     76          #elif defined(__GNUC__)
     77              extern uint32_t __VECTOR_TABLE[];
     78          #endif
     79          
     80          #if (defined(__ICCARM__))
     81              SCB->VTOR = (uint32_t)__section_begin(".intvec");
   \   00000002   0x....             LDR.N    R1,??DataTable1  ;; 0xe000ed08
   \   00000004   0x....             LDR.N    R0,??DataTable1_1
   \   00000006   0x6008             STR      R0,[R1, #+0]
     82          #else
     83              SCB->VTOR = (uint32_t)__VECTOR_TABLE;
     84          #endif
     85          
     86          #if !defined(__CC_ARM)
     87          
     88              /* Declare pointers for various data sections. These pointers
     89               * are initialized using values pulled in from the linker file */
     90              uint8_t * data_ram, * data_rom, * data_rom_end;
     91              uint8_t * bss_start, * bss_end;
     92              uint32_t n;
     93          
     94              // Get the addresses for the .data section (initialized data section)
     95          #if defined(__GNUC__)
     96              extern uint32_t __DATA_ROM[];
     97              extern uint32_t __DATA_RAM[];
     98              extern char __DATA_END[];
     99              data_ram = (uint8_t *)__DATA_RAM;
    100              data_rom = (uint8_t *)__DATA_ROM;
    101              data_rom_end  = (uint8_t *)__DATA_END; // This is actually a RAM address in CodeWarrior
    102              n = data_rom_end - data_rom;
    103          #elif (defined(__ICCARM__))
    104              data_ram = __section_begin(".data");
    105              data_rom = __section_begin(".data_init");
    106              data_rom_end = __section_end(".data_init");
    107              n = data_rom_end - data_rom;
   \   00000008   0x....             LDR.N    R1,??DataTable1_2
   \   0000000A   0x....             LDR.N    R0,??DataTable1_3
   \   0000000C   0x1A42             SUBS     R2,R0,R1
    108          #endif
    109          
    110              if (data_ram != data_rom)
   \   0000000E   0x....             LDR.N    R0,??DataTable1_4
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xBF1C             ITT      NE 
    111              {
    112                  // Copy initialized data from ROM to RAM
    113                  while (n)
   \   00000014   0x2A00             CMPNE    R2,#+0
    114                  {
    115                      *data_ram++ = *data_rom++;
   \   00000016   0x.... 0x....      BLNE     __aeabi_memcpy
    116                      n--;
    117                  }
    118              }
    119          
    120              // Get the addresses for the .bss section (zero-initialized data)
    121          #if defined(__GNUC__)
    122              extern char __START_BSS[];
    123              extern char __END_BSS[];
    124              bss_start = (uint8_t *)__START_BSS;
    125              bss_end = (uint8_t *)__END_BSS;
    126          #elif (defined(__ICCARM__))
    127              bss_start = __section_begin(".bss");
    128              bss_end = __section_end(".bss");
    129          #endif
    130          
    131          
    132              // Clear the zero-initialized data section
    133              n = bss_end - bss_start;
   \   0000001A   0x....             LDR.N    R0,??DataTable1_5
   \   0000001C   0x....             LDR.N    R1,??DataTable1_6
   \   0000001E   0x1A09             SUBS     R1,R1,R0
    134              while(n)
   \   00000020   0xBF18             IT       NE 
    135              {
    136                  *bss_start++ = 0;
   \   00000022   0x.... 0x....      BLNE     __aeabi_memclr
    137                  n--;
    138              }
    139          
    140              /* Get addresses for any code sections that need to be copied from ROM to RAM.
    141               * The IAR tools have a predefined keyword that can be used to mark individual
    142               * functions for execution from RAM. Add "__ramfunc" before the return type in
    143               * the function prototype for any routines you need to execute from RAM instead
    144               * of ROM. ex: __ramfunc void foo(void);
    145               */
    146          #if (defined(__ICCARM__))
    147              uint8_t* code_relocate_ram = __section_begin("CodeRelocateRam");
    148              uint8_t* code_relocate = __section_begin("CodeRelocate");
    149              uint8_t* code_relocate_end = __section_end("CodeRelocate");
    150          
    151              // Copy functions from ROM to RAM
    152              n = code_relocate_end - code_relocate;
   \   00000026   0x....             LDR.N    R1,??DataTable1_7
   \   00000028   0x....             LDR.N    R0,??DataTable1_8
   \   0000002A   0x1A42             SUBS     R2,R0,R1
    153              while (n)
   \   0000002C   0xD004             BEQ.N    ??init_data_bss_0
    154              {
    155                  *code_relocate_ram++ = *code_relocate++;
   \   0000002E   0xE8BD 0x4008      POP      {R3,LR}
   \   00000032   0x....             LDR.N    R0,??DataTable1_9
   \   00000034   0x.... 0x....      B.W      __aeabi_memcpy
    156                  n--;
    157              }
    158          #endif
    159          #endif /* !__CC_ARM && !__ICCARM__*/
    160          }
   \                     ??init_data_bss_0: (+1)
   \   00000038   0xBD01             POP      {R0,PC}          ;; return
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void init_interrupts(void)
    163          {
    164              // Clear any IRQs that may be enabled, we only want the IRQs we enable to be active
    165              NVIC_ClearEnabledIRQs();
   \                     init_interrupts: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1_10  ;; 0xe000e180
   \   00000002   0xF04F 0x31FF      MOV      R1,#-1
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \   00000008   0x6041             STR      R1,[R0, #+4]
   \   0000000A   0x6081             STR      R1,[R0, #+8]
   \   0000000C   0x60C1             STR      R1,[R0, #+12]
   \   0000000E   0x6101             STR      R1,[R0, #+16]
   \   00000010   0x6141             STR      R1,[R0, #+20]
   \   00000012   0x6181             STR      R1,[R0, #+24]
   \   00000014   0x61C1             STR      R1,[R0, #+28]
    166          
    167              // Clear any pending IRQs that may have been set
    168              NVIC_ClearAllPendingIRQs();
   \   00000016   0x....             LDR.N    R0,??DataTable1_11  ;; 0xe000e280
   \   00000018   0x6001             STR      R1,[R0, #+0]
   \   0000001A   0x6041             STR      R1,[R0, #+4]
   \   0000001C   0x6081             STR      R1,[R0, #+8]
   \   0000001E   0x60C1             STR      R1,[R0, #+12]
   \   00000020   0x6101             STR      R1,[R0, #+16]
   \   00000022   0x6141             STR      R1,[R0, #+20]
   \   00000024   0x6181             STR      R1,[R0, #+24]
   \   00000026   0x61C1             STR      R1,[R0, #+28]
    169          }
   \   00000028   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     SFB(`.intvec`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     SFB(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     SFE(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     SFB(`.data`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     SFB(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     SFE(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     SFB(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     SFE(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     SFB(CodeRelocateRam)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0xE000E280         DC32     0xe000e280
    170          
    171          ////////////////////////////////////////////////////////////////////////////////
    172          // EOF
    173          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   init_data_bss
         8   -> __aeabi_memclr
         0   -> __aeabi_memcpy
         8   -> __aeabi_memcpy
       0   init_interrupts


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      58  init_data_bss
      42  init_interrupts

 
 148 bytes in section .text
 
 148 bytes of CODE memory

Errors: none
Warnings: none
