###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       13/Mar/2016  16:46:18
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\memory\src\device_memory.c
#    Command line =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\memory\src\device_memory.c
#        -D NDEBUG -D CPU_MK22FN512VDC12 -D CPU_IS_ARM_CORTEX_M4=1 -D IAR -D
#        FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa050 -o
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program Files\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include/device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/uart\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/hid_device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/os/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/arch/cortex_m\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/soc/MK22F\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/common\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/hid\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/khci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/ehci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/hal\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list\device_memory.lst
#    Object file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj\device_memory.o
#
###############################################################################

C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\memory\src\device_memory.c
      1          /*
      2           * Copyright (c) 2013, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include <string.h>
     32          #include "device_memory.h"
     33          #include "pattern_fill.h"
     34          
     35          ////////////////////////////////////////////////////////////////////////////////
     36          // Prototypes
     37          ////////////////////////////////////////////////////////////////////////////////
     38          
     39          static void device_copy(uint32_t address, uint32_t length, uint32_t buffer);
     40          
     41          ////////////////////////////////////////////////////////////////////////////////
     42          // Variables
     43          ////////////////////////////////////////////////////////////////////////////////
     44          
     45          //! @brief Interface to simulator memory operations.

   \                                 In section .rodata, align 4, keep-with-next
     46          const memory_region_interface_t g_deviceMemoryInterface = {
   \                     g_deviceMemoryInterface:
   \   00000000   0x00000000         DC32 0H, device_mem_read, device_mem_write, device_mem_fill, 0H, 0H
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x00000000   
   \              0x00000000   
     47              .read = &device_mem_read,
     48              .write = &device_mem_write,
     49          #if !BL_MIN_PROFILE || BL_FEATURE_FILL_MEMORY
     50              .fill = &device_mem_fill,
     51          #endif // !BL_MIN_PROFILE
     52              .flush = NULL,
     53              .erase = NULL
     54          };
     55          
     56          ////////////////////////////////////////////////////////////////////////////////
     57          // Code
     58          ////////////////////////////////////////////////////////////////////////////////
     59          
     60          //! @brief Device-safe memory copy.
     61          //!
     62          //! Performs a memory copy using aligned accesses of no more than one word
     63          //! at a time.

   \                                 In section .text, align 2, keep-with-next
     64          void device_copy(uint32_t address, uint32_t length, uint32_t buffer)
     65          {
   \                     device_copy: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xE004             B.N      ??device_copy_0
     66              // This loop lets us reuse the byte and halfword copy code.
     67              while (length)
     68              {
     69                  // Handle leading/trailing byte.
     70                  if ((address & 1) || (length == 1))
     71                  {
     72                      *(uint8_t *)address = *(const uint8_t *)buffer;
   \                     ??device_copy_1: (+1)
   \   00000004   0xF812 0x4B01      LDRB     R4,[R2], #+1
   \   00000008   0xF800 0x4B01      STRB     R4,[R0], #+1
     73                      ++address;
     74                      ++buffer;
     75                      --length;
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
     76                      continue;
     77                  }
   \                     ??device_copy_0: (+1)
   \   0000000E   0xB1D1             CBZ.N    R1,??device_copy_2
   \   00000010   0x07C5             LSLS     R5,R0,#+31
   \   00000012   0xD4F7             BMI.N    ??device_copy_1
   \   00000014   0x2901             CMP      R1,#+1
   \   00000016   0xD0F5             BEQ.N    ??device_copy_1
     78          
     79                  // Handle leading/trailing halfword.
     80                  if ((address & 2) || (length < sizeof(uint32_t)))
   \   00000018   0x0785             LSLS     R5,R0,#+30
   \   0000001A   0xD401             BMI.N    ??device_copy_3
   \   0000001C   0x2904             CMP      R1,#+4
   \   0000001E   0xD204             BCS.N    ??device_copy_4
     81                  {
     82                      *(uint16_t *)address = *(const uint16_t *)buffer;
   \                     ??device_copy_3: (+1)
   \   00000020   0xF832 0x4B02      LDRH     R4,[R2], #+2
   \   00000024   0xF820 0x4B02      STRH     R4,[R0], #+2
     83                      address += sizeof(uint16_t);
     84                      buffer += sizeof(uint16_t);
     85                      length -= sizeof(uint16_t);
   \   00000028   0x1E89             SUBS     R1,R1,#+2
     86                  }
     87          
     88                  // Copy as many whole words as remain.
     89                  uint32_t words = length >> 2;
   \                     ??device_copy_4: (+1)
   \   0000002A   0x088B             LSRS     R3,R1,#+2
     90                  if (words)
   \   0000002C   0xD0EF             BEQ.N    ??device_copy_0
     91                  {
     92                      uint32_t wordsLength = words << 2;
     93                      uint32_t end = address + wordsLength;
   \   0000002E   0xEB00 0x0483      ADD      R4,R0,R3, LSL #+2
   \   00000032   0xE003             B.N      ??device_copy_5
     94                      while (address < end)
     95                      {
     96                          *(uint32_t *)address = *(uint32_t *)buffer;
   \                     ??device_copy_6: (+1)
   \   00000034   0xF852 0x5B04      LDR      R5,[R2], #+4
   \   00000038   0xF840 0x5B04      STR      R5,[R0], #+4
     97                          address += sizeof(uint32_t);
     98                          buffer += sizeof(uint32_t);
     99                      }
   \                     ??device_copy_5: (+1)
   \   0000003C   0x42A0             CMP      R0,R4
   \   0000003E   0xD3F9             BCC.N    ??device_copy_6
    100          
    101                      length -= wordsLength;
   \   00000040   0xEBA1 0x0183      SUB      R1,R1,R3, LSL #+2
   \   00000044   0xE7E3             B.N      ??device_copy_0
    102                  }
    103              }
    104          }
   \                     ??device_copy_2: (+1)
   \   00000046   0xBD30             POP      {R4,R5,PC}       ;; return
    105          

   \                                 In section .text, align 2, keep-with-next
    106          status_t device_mem_read(uint32_t address, uint32_t length, uint8_t * buffer)
    107          {
   \                     device_mem_read: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4613             MOV      R3,R2
    108              device_copy((uint32_t)buffer, length, address);
   \   00000004   0x4602             MOV      R2,R0
   \   00000006   0x4618             MOV      R0,R3
   \   00000008   0x....             B.N      ?Subroutine0
    109              return kStatus_Success;
    110          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       device_copy
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    111          

   \                                 In section .text, align 2, keep-with-next
    112          status_t device_mem_write(uint32_t address, uint32_t length, const uint8_t * buffer)
    113          {
   \                     device_mem_write: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    114              device_copy(address, length, (uint32_t)buffer);
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
    115              return kStatus_Success;
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          status_t device_mem_fill(uint32_t address, uint32_t length, uint32_t pattern)
    119          {
   \                     device_mem_fill: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4614             MOV      R4,R2
    120              status_t status = kStatus_Success;
    121              status = pattern_fill(address, pattern, length, true);
    122              return status;
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x4621             MOV      R1,R4
   \   00000008   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000C   0x2301             MOVS     R3,#+1
   \   0000000E   0x.... 0x....      B.W      pattern_fill
    123          }
    124          
    125          ////////////////////////////////////////////////////////////////////////////////
    126          // EOF
    127          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   device_copy
       8   device_mem_fill
         0   -> pattern_fill
       8   device_mem_read
         8   -> device_copy
       0   device_mem_write
         8   -> device_copy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?Subroutine0
      72  device_copy
      18  device_mem_fill
      10  device_mem_read
       2  device_mem_write
      24  g_deviceMemoryInterface

 
  24 bytes in section .rodata
 110 bytes in section .text
 
 110 bytes of CODE  memory
  24 bytes of CONST memory

Errors: none
Warnings: none
