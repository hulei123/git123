###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       13/Mar/2016  16:46:25
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\flash\src\flash_erase.c
#    Command line =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\flash\src\flash_erase.c
#        -D NDEBUG -D CPU_MK22FN512VDC12 -D CPU_IS_ARM_CORTEX_M4=1 -D IAR -D
#        FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa050 -o
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program Files\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include/device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/uart\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/hid_device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/os/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/arch/cortex_m\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/soc/MK22F\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/common\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/hid\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/khci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/ehci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/hal\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list\flash_erase.lst
#    Object file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj\flash_erase.o
#
###############################################################################

C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\flash\src\flash_erase.c
      1          /*
      2           * Copyright (c) 2013-2014, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "SSD_FTFx_Common.h"
     32          #include "flash/flash.h"
     33          #include "fsl_platform_status.h"
     34          #include "fsl_platform_types.h"
     35          
     36          ////////////////////////////////////////////////////////////////////////////////
     37          // Code
     38          ////////////////////////////////////////////////////////////////////////////////
     39          
     40          // See flash.h for documentation of this function.

   \                                 In section .text, align 4, keep-with-next
     41          status_t flash_erase(flash_driver_t * driver, uint32_t start, uint32_t lengthInBytes, uint32_t key)
     42          {
   \                     flash_erase: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4698             MOV      R8,R3
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
     43              // Check the supplied address range.
     44              status_t returnCode = flash_check_range(driver, start, lengthInBytes, FSL_FEATURE_FLASH_PFLASH_SECTOR_CMD_ADDRESS_ALIGMENT);
   \   0000000C   0x2308             MOVS     R3,#+8
   \   0000000E   0x.... 0x....      BL       flash_check_range
   \   00000012   0x0007             MOVS     R7,R0
     45              if (returnCode)
   \   00000014   0xD11A             BNE.N    ??flash_erase_0
     46              {
     47                  return returnCode;
     48              }
     49          
     50              uint32_t endAddress;      // storing end address
     51              uint32_t numberOfSectors;  // number of sectors calculated by endAddress
     52          
     53              // calculating Flash end address
     54              endAddress = start + lengthInBytes - 1;
   \   00000016   0x1970             ADDS     R0,R6,R5
   \   00000018   0x1E46             SUBS     R6,R0,#+1
     55          
     56              // re-calculate the endAddress and align it to the start of the next sector
     57              // which will be used in the comparison below
     58              if (endAddress % driver->PFlashSectorSize)
   \   0000001A   0x68E0             LDR      R0,[R4, #+12]
   \   0000001C   0xFBB6 0xF1F0      UDIV     R1,R6,R0
   \   00000020   0xFB00 0x6211      MLS      R2,R0,R1,R6
   \   00000024   0xB12A             CBZ.N    R2,??flash_erase_1
     59              {
     60                  numberOfSectors = endAddress / driver->PFlashSectorSize + 1;
     61                  endAddress = numberOfSectors * driver->PFlashSectorSize - 1;
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0x4348             MULS     R0,R0,R1
   \   0000002A   0x1E46             SUBS     R6,R0,#+1
   \   0000002C   0xE001             B.N      ??flash_erase_1
     62              }
     63          
     64              // the start address will increment to the next sector address
     65              // until it reaches the endAdddress
     66              while (start <= endAddress)
     67              {
     68                  // preparing passing parameter to erase a flash block
     69                  kFCCOBx[0] = start;
     70                  FTFx_WR_FCCOBx(FTFx, 0, FTFx_ERASE_SECTOR);
     71          
     72                  // Validate the user key
     73                  returnCode = flash_check_user_key(key);
     74                  if (returnCode)
     75                  {
     76                      return returnCode;
     77                  }
     78          
     79                  // calling flash command sequence function to execute the command
     80                  returnCode = flash_command_sequence(driver);
     81          
     82                  // calling flash callback function if it is available
     83                  if (driver->PFlashCallback)
     84                  {
     85                      driver->PFlashCallback();
     86                  }
     87          
     88                  // checking the success of command execution
     89                  if (kStatus_Success != returnCode)
     90                  {
     91                      break;
     92                  }
     93                  else
     94                  {
     95                      // Increment to the next sector
     96                      start += driver->PFlashSectorSize;
   \                     ??flash_erase_2: (+1)
   \   0000002E   0x68E0             LDR      R0,[R4, #+12]
   \   00000030   0x1945             ADDS     R5,R0,R5
     97                  }
   \                     ??flash_erase_1: (+1)
   \   00000032   0x42AE             CMP      R6,R5
   \   00000034   0xD317             BCC.N    ??flash_erase_3
   \   00000036   0x480E             LDR.N    R0,??flash_erase_4
   \   00000038   0x490E             LDR.N    R1,??flash_erase_4+0x4  ;; 0x40020007
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x6005             STR      R5,[R0, #+0]
   \   0000003E   0x2009             MOVS     R0,#+9
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   \   00000042   0x4640             MOV      R0,R8
   \   00000044   0x.... 0x....      BL       flash_check_user_key
   \   00000048   0x0007             MOVS     R7,R0
   \   0000004A   0xD002             BEQ.N    ??flash_erase_5
   \                     ??flash_erase_0: (+1)
   \   0000004C   0x4638             MOV      R0,R7
   \   0000004E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??flash_erase_5: (+1)
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       flash_command_sequence
   \   00000058   0x4607             MOV      R7,R0
   \   0000005A   0x6920             LDR      R0,[R4, #+16]
   \   0000005C   0x0001             MOVS     R1,R0
   \   0000005E   0xBF18             IT       NE 
   \   00000060   0x4780             BLXNE    R0
   \   00000062   0x2F00             CMP      R7,#+0
   \   00000064   0xD0E3             BEQ.N    ??flash_erase_2
     98              }
     99          
    100              flash_cache_clear(driver);
   \                     ??flash_erase_3: (+1)
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       flash_cache_clear
   \   0000006C   0xE7EE             B.N      ??flash_erase_0
   \   0000006E   0xBF00             Nop      
   \                     ??flash_erase_4:
   \   00000070   0x........         DC32     kFCCOBx
   \   00000074   0x40020007         DC32     0x40020007
    101          
    102              return(returnCode);
    103          }
    104          
    105          ////////////////////////////////////////////////////////////////////////////////
    106          // EOF
    107          ////////////////////////////////////////////////////////////////////////////////
    108          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   flash_erase
        24   -- Indirect call
        24   -> flash_cache_clear
        24   -> flash_check_range
        24   -> flash_check_user_key
        24   -> flash_command_sequence


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     120  flash_erase

 
 120 bytes in section .text
 
 120 bytes of CODE memory

Errors: none
Warnings: none
