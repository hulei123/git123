###############################################################################
#
# IAR ANSI C/C++ Compiler V7.50.3.10732/W32 for ARM       13/Mar/2016  16:47:26
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\uart\scuart.c
#    Command line =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\uart\scuart.c
#        -D NDEBUG -D CPU_MK22FN512VDC12 -D CPU_IS_ARM_CORTEX_M4=1 -D IAR -D
#        FREEDOM -D BL_TARGET_FLASH -lC
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list
#        --diag_suppress Pa050 -o
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj
#        --no_unroll --debug --endian=little --cpu=Cortex-M4 -e --fpu=None
#        --dlib_config "F:\Program Files\IAR Systems\Embedded Workbench
#        7.3\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/include/device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/autobaud\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/startup\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/drivers/uart\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/hid_device\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/adapter/sources/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/os/bm\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/arch/cortex_m\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/soc/MK22F\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/platform/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/include/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/bsp/mk22f\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/common\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/hid\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/classes/include\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/khci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/device/sources/controller/ehci\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/hal\
#        -I
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader/../../../../src/usb_stack/usb_core/include\
#        -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\list\scuart.lst
#    Object file  =  
#        C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\targets\MK22F51212\iar\freedom_bootloader\debug\obj\scuart.o
#
###############################################################################

C:\Users\hulei\Desktop\FSL_Kinetis_Bootloader_1_2_1\src\drivers\uart\scuart.c
      1          /*
      2           * Copyright (c) 2013, Freescale Semiconductor, Inc.
      3           * All rights reserved.
      4           *
      5           * Redistribution and use in source and binary forms, with or without modification,
      6           * are permitted provided that the following conditions are met:
      7           *
      8           * o Redistributions of source code must retain the above copyright notice, this list
      9           *   of conditions and the following disclaimer.
     10           *
     11           * o Redistributions in binary form must reproduce the above copyright notice, this
     12           *   list of conditions and the following disclaimer in the documentation and/or
     13           *   other materials provided with the distribution.
     14           *
     15           * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
     16           *   contributors may be used to endorse or promote products derived from this
     17           *   software without specific prior written permission.
     18           *
     19           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
     20           * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     21           * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     22           * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
     23           * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     24           * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
     25           * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
     26           * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     27           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     28           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     29           */
     30          
     31          #include "bootloader_common.h"
     32          #include "fsl_platform_common.h"
     33          #include "scuart.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF000 0x021F      AND      R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable6  ;; 0xe000e100
   \   0000000A   0x....             B.N      ?Subroutine0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x0940             LSRS     R0,R0,#+5
   \   00000002   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000006   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF000 0x021F      AND      R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable6_1  ;; 0xe000e180
   \   0000000A                      REQUIRE ?Subroutine0
   \   0000000A                      ;; // Fall through to label ?Subroutine0
     34          #include <stdarg.h>
     35          
     36          #if BL_CONFIG_SCUART
     37          

   \                                 In section .bss, align 4
     38          static scuart_data_sink_func_t s_scuart_data_sink_callback;
   \                     s_scuart_data_sink_callback:
   \   00000000                      DS8 4
     39          
     40          /********************************************************************/
     41          /*
     42           * Resets SCUART
     43           *
     44           * Parameters:
     45           */

   \                                 In section .text, align 2, keep-with-next
     46          void scuart_reset (UART_Type * uartch)
     47          {
     48              // Restore those control and configuration registers which are used to
     49              // be operated
     50              uartch->C2 = 0;
   \                     scuart_reset: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x70C1             STRB     R1,[R0, #+3]
     51              uartch->C1 = 0;
   \   00000004   0x7081             STRB     R1,[R0, #+2]
     52              uartch->BDH = 0;
   \   00000006   0x7001             STRB     R1,[R0, #+0]
     53              uartch->BDL = 0x4u;
   \   00000008   0x2104             MOVS     R1,#+4
   \   0000000A   0x7041             STRB     R1,[R0, #+1]
     54              uartch->C4 = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x7281             STRB     R1,[R0, #+10]
     55              uartch->CFIFO = 0;
   \   00000010   0x7441             STRB     R1,[R0, #+17]
     56          }
   \   00000012   0x4770             BX       LR               ;; return
     57          /********************************************************************/
     58          
     59          /********************************************************************/
     60          /*
     61           * Initialize the uart for 8N1 operation, interrupts disabled, and
     62           * no hardware flow-control
     63           *
     64           * NOTE: Since the uarts are pinned out in multiple locations on most
     65           *       Kinetis devices, this driver does not enable uart pin functions.
     66           *       The desired pins should be enabled before calling this init function.
     67           *
     68           * Parameters:
     69           *  uartch      uart channel to initialize
     70           *  uartclk     uart module Clock in Hz(used to calculate baud)
     71           *  baud        uart baud rate
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          status_t scuart_init (UART_Type * uartch, int uartclk, int baud, scuart_data_sink_func_t function)
     74          {
   \                     scuart_init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
     75              uint8_t i;
     76              uint32_t calculatedBaud = 0;
     77              uint32_t baudDiff = ~0;
     78              uint32_t brfaVal = 0;
     79              uint32_t sbrVal;
     80              uint32_t temp = 0;
     81          
     82              s_scuart_data_sink_callback = function;
   \   00000002   0x....             LDR.N    R6,??DataTable6_2
   \   00000004   0x6033             STR      R3,[R6, #+0]
     83          
     84              // Calculate the SBR with a BRFA of 0
     85              sbrVal = uartclk / (16 * baud);
   \   00000006   0x0113             LSLS     R3,R2,#+4
   \   00000008   0xFB91 0xF6F3      SDIV     R6,R1,R3
     86              calculatedBaud = uartclk / (16 * sbrVal);
   \   0000000C   0x0133             LSLS     R3,R6,#+4
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0xFBB1 0xF3F3      UDIV     R3,R1,R3
   \   00000014   0x4604             MOV      R4,R0
     87          
     88              // Make sure the SBR is at least a step higher than the baud we want
     89              // then tune it down by adding the fractional divisor below
     90              if (calculatedBaud < baud)
   \   00000016   0x4293             CMP      R3,R2
   \   00000018   0xF04F 0x30FF      MOV      R0,#-1
   \   0000001C   0xBF38             IT       CC 
   \   0000001E   0x1E76             SUBCC    R6,R6,#+1
     91              {
     92                  sbrVal -= 1;
   \   00000020   0xD300             BCC.N    ??scuart_init_0
     93              }
     94          
     95              if (calculatedBaud != baud)
   \   00000022   0xD010             BEQ.N    ??scuart_init_1
     96              {
     97                  // Now tune to the best BRFA value
     98                  for (i = 1; i <= 32; i++)
   \                     ??scuart_init_0: (+1)
   \   00000024   0x2701             MOVS     R7,#+1
     99                  {
    100                      calculatedBaud = (2 * uartclk) / ((32 * sbrVal) + i);
   \                     ??scuart_init_2: (+1)
   \   00000026   0x004B             LSLS     R3,R1,#+1
   \   00000028   0xEB07 0x1C46      ADD      R12,R7,R6, LSL #+5
   \   0000002C   0xFBB3 0xF3FC      UDIV     R3,R3,R12
    101          
    102                      if (calculatedBaud > baud)
   \   00000030   0x429A             CMP      R2,R3
   \   00000032   0xBF34             ITE      CC 
   \   00000034   0x1A9B             SUBCC    R3,R3,R2
   \   00000036   0x1AD3             SUBCS    R3,R2,R3
    103                      {
    104                          temp = calculatedBaud - baud;
    105                      }
    106                      else
    107                      {
    108                          temp = baud - calculatedBaud;
    109                      }
    110          
    111                      if (temp <= baudDiff)
   \   00000038   0x4298             CMP      R0,R3
   \   0000003A   0xBF24             ITT      CS 
   \   0000003C   0x4618             MOVCS    R0,R3
   \   0000003E   0x463D             MOVCS    R5,R7
    112                      {
    113                          baudDiff = temp;
    114                          brfaVal = i;
    115                      }
    116                  }
   \   00000040   0x1C7F             ADDS     R7,R7,#+1
   \   00000042   0x2F21             CMP      R7,#+33
   \   00000044   0xDBEF             BLT.N    ??scuart_init_2
    117              }
    118          
    119              if (baudDiff < ((baud / 100) * 3))
   \                     ??scuart_init_1: (+1)
   \   00000046   0x2164             MOVS     R1,#+100
   \   00000048   0xFB92 0xF1F1      SDIV     R1,R2,R1
   \   0000004C   0xEB01 0x0141      ADD      R1,R1,R1, LSL #+1
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD23F             BCS.N    ??scuart_init_3
    120              {
    121                  switch((unsigned int)uartch)
   \   00000054   0x....             LDR.N    R1,??DataTable6_3  ;; 0x4006a000
   \   00000056   0x....             LDR.N    R7,??DataTable6_4  ;; 0x40048034
   \   00000058   0x428C             CMP      R4,R1
   \   0000005A   0xD006             BEQ.N    ??scuart_init_4
   \   0000005C   0x....             LDR.N    R1,??DataTable6_5  ;; 0x4006b000
   \   0000005E   0x428C             CMP      R4,R1
   \   00000060   0xD00A             BEQ.N    ??scuart_init_5
   \   00000062   0x....             LDR.N    R1,??DataTable6_6  ;; 0x4006c000
   \   00000064   0x428C             CMP      R4,R1
   \   00000066   0xD00E             BEQ.N    ??scuart_init_6
   \   00000068   0xE014             B.N      ??scuart_init_7
    122                  {
    123                      case (unsigned int)UART0:
    124                          NVIC_EnableIRQ(UART0_RX_TX_IRQn);
   \                     ??scuart_init_4: (+1)
   \   0000006A   0x201F             MOVS     R0,#+31
   \   0000006C   0x.... 0x....      BL       NVIC_EnableIRQ
    125                          SIM_SET_SCGC4(SIM, SIM_SCGC4_UART0_MASK);
   \   00000070   0x6838             LDR      R0,[R7, #+0]
   \   00000072   0xF440 0x6080      ORR      R0,R0,#0x400
   \   00000076   0xE00C             B.N      ??scuart_init_8
    126                          break;
    127                      case (unsigned int)UART1:
    128                          NVIC_EnableIRQ(UART1_RX_TX_IRQn);
   \                     ??scuart_init_5: (+1)
   \   00000078   0x2021             MOVS     R0,#+33
   \   0000007A   0x.... 0x....      BL       NVIC_EnableIRQ
    129                          SIM_SET_SCGC4(SIM, SIM_SCGC4_UART1_MASK);
   \   0000007E   0x6838             LDR      R0,[R7, #+0]
   \   00000080   0xF440 0x6000      ORR      R0,R0,#0x800
   \   00000084   0xE005             B.N      ??scuart_init_8
    130                          break;
    131          #if (UART_INSTANCE_COUNT > 2U)
    132                      case (unsigned int)UART2:
    133                          NVIC_EnableIRQ(UART2_RX_TX_IRQn);
   \                     ??scuart_init_6: (+1)
   \   00000086   0x2023             MOVS     R0,#+35
   \   00000088   0x.... 0x....      BL       NVIC_EnableIRQ
    134                          SIM_SET_SCGC4(SIM, SIM_SCGC4_UART2_MASK);
   \   0000008C   0x6838             LDR      R0,[R7, #+0]
   \   0000008E   0xF440 0x5080      ORR      R0,R0,#0x1000
   \                     ??scuart_init_8: (+1)
   \   00000092   0x6038             STR      R0,[R7, #+0]
    135                          break;
    136          #if (UART_INSTANCE_COUNT > 3U)
    137                      case (unsigned int)UART3:
    138                          NVIC_EnableIRQ(UART3_RX_TX_IRQn);
    139                          SIM_SET_SCGC4(SIM, SIM_SCGC4_UART3_MASK);
    140                          break;
    141                      case (unsigned int)UART4:
    142                          NVIC_EnableIRQ(UART4_RX_TX_IRQn);
    143                          SIM_SET_SCGC1(SIM, SIM_SCGC1_UART4_MASK);
    144                          break;
    145          #if (UART_INSTANCE_COUNT > 5U)
    146                      case (unsigned int)UART5:
    147                          NVIC_EnableIRQ(UART5_RX_TX_IRQn);
    148                          SIM_SET_SCGC1(SIM, SIM_SCGC1_UART5_MASK);
    149                          break;
    150          #endif
    151          #endif // (UART_INSTANCE_COUNT > 3U)
    152          #endif //(UART_INSTANCE_COUNT > 2U)
    153                  }
    154          
    155                  //Make sure that the transmitter and receiver are disabled while we
    156                  //change settings.
    157                  uartch->C2 &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK );
   \                     ??scuart_init_7: (+1)
   \   00000094   0x78E0             LDRB     R0,[R4, #+3]
   \   00000096   0xF000 0x00F3      AND      R0,R0,#0xF3
   \   0000009A   0x70E0             STRB     R0,[R4, #+3]
    158          
    159                  // Configure the uart for 8-bit mode, no parity
    160                  uartch->C1 = 0;    // We need all default settings, so entire register is cleared
    161          
    162                  // Save off the current value of the uartx_BDH except for the SBR field
    163                  temp = uartch->BDH & ~(UART_BDH_SBR(0x1F));
    164          
    165                  uartch->BDH = temp |  UART_BDH_SBR(((sbrVal & 0x1F00) >> 8));
   \   0000009C   0x0A31             LSRS     R1,R6,#+8
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0x70A0             STRB     R0,[R4, #+2]
   \   000000A2   0xF001 0x011F      AND      R1,R1,#0x1F
   \   000000A6   0x7820             LDRB     R0,[R4, #+0]
   \   000000A8   0xF000 0x00E0      AND      R0,R0,#0xE0
   \   000000AC   0x4308             ORRS     R0,R1,R0
   \   000000AE   0x7020             STRB     R0,[R4, #+0]
    166                  uartch->BDL = (uint8_t)(sbrVal & UART_BDL_SBR_MASK);
   \   000000B0   0x7066             STRB     R6,[R4, #+1]
    167                  uartch->C4 = (uartch->C4 & ~(UART_C4_BRFA_MASK)) | (brfaVal << UART_C4_BRFA_SHIFT);
   \   000000B2   0x7AA0             LDRB     R0,[R4, #+10]
   \   000000B4   0xF000 0x00E0      AND      R0,R0,#0xE0
   \   000000B8   0x4328             ORRS     R0,R5,R0
   \   000000BA   0x72A0             STRB     R0,[R4, #+10]
    168          
    169                  // Flush the RX and TX FIFO's
    170                  uartch->CFIFO = UART_CFIFO_RXFLUSH_MASK | UART_CFIFO_TXFLUSH_MASK;
   \   000000BC   0x20C0             MOVS     R0,#+192
   \   000000BE   0x7460             STRB     R0,[R4, #+17]
    171          
    172                  // Enable receive interrupts
    173                  uartch->C2 |= UART_C2_RIE_MASK;
   \   000000C0   0x78E0             LDRB     R0,[R4, #+3]
   \   000000C2   0xF040 0x0020      ORR      R0,R0,#0x20
   \   000000C6   0x70E0             STRB     R0,[R4, #+3]
    174          
    175                  // Enable receiver and transmitter
    176                  uartch->C2 |= (UART_C2_TE_MASK | UART_C2_RE_MASK );
   \   000000C8   0x78E0             LDRB     R0,[R4, #+3]
   \   000000CA   0xF040 0x000C      ORR      R0,R0,#0xC
   \   000000CE   0x70E0             STRB     R0,[R4, #+3]
    177          
    178                  return kStatus_Success;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0xBDF2             POP      {R1,R4-R7,PC}
    179              }
    180              else
    181              {
    182                  return kStatus_Fail;
   \                     ??scuart_init_3: (+1)
   \   000000D4   0x2001             MOVS     R0,#+1
   \   000000D6   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    183              }
    184          
    185          }
    186          
    187          /********************************************************************/
    188          /*
    189           * Wait for space in the uart Tx FIFO and then send a character
    190           *
    191           * Parameters:
    192           *  channel      uart channel to send to
    193           *  ch             character to send
    194           */

   \                                 In section .text, align 2, keep-with-next
    195          void scuart_putchar (UART_Type * channel, char ch)
    196          {
    197              // Wait until space is available in the FIFO
    198              while(!(channel->S1 & UART_S1_TDRE_MASK));
   \                     scuart_putchar: (+1)
   \                     ??scuart_putchar_0: (+1)
   \   00000000   0x7902             LDRB     R2,[R0, #+4]
   \   00000002   0x0612             LSLS     R2,R2,#+24
   \   00000004   0xD5FC             BPL.N    ??scuart_putchar_0
    199          
    200              // Send the character
    201              channel->D = (uint8_t)ch;
   \   00000006   0x71C1             STRB     R1,[R0, #+7]
    202          }
   \   00000008   0x4770             BX       LR               ;; return
    203          
    204          /********************************************************************/
    205          /*
    206           * UART0 IRQ Handler
    207           *
    208           */
    209          

   \                                 In section .text, align 2, keep-with-next
    210          void UART0_RX_TX_IRQHandler(void)
    211          {
    212              if (UART0->S1 & UART_S1_RDRF_MASK)
   \                     UART0_RX_TX_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_7  ;; 0x4006a004
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x0689             LSLS     R1,R1,#+26
   \   00000006   0xD500             BPL.N    ??UART0_RX_TX_IRQHandler_0
    213              {
    214                  s_scuart_data_sink_callback(UART0->D);
   \   00000008   0x....             B.N      ?Subroutine1
    215              }
    216          }
   \                     ??UART0_RX_TX_IRQHandler_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x78C0             LDRB     R0,[R0, #+3]
   \   00000002   0x....             LDR.N    R1,??DataTable6_2
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4708             BX       R1
    217          
    218          /********************************************************************/
    219          /*
    220           * UART1 IRQ Handler
    221           *
    222           */
    223          

   \                                 In section .text, align 2, keep-with-next
    224          void UART1_RX_TX_IRQHandler(void)
    225          {
    226              uint8_t s1 = UART1->S1;
   \                     UART1_RX_TX_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_8  ;; 0x4006b004
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
    227              uint8_t d;
    228          
    229              if (s1 & UART_S1_FE_MASK)
   \   00000004   0x078A             LSLS     R2,R1,#+30
   \   00000006   0xD501             BPL.N    ??UART1_RX_TX_IRQHandler_0
    230              {
    231                  d = UART1->D;
   \   00000008   0x78C0             LDRB     R0,[R0, #+3]
   \   0000000A   0x4770             BX       LR
    232              }
    233              else if (s1 & UART_S1_RDRF_MASK)
   \                     ??UART1_RX_TX_IRQHandler_0: (+1)
   \   0000000C   0x0689             LSLS     R1,R1,#+26
   \   0000000E   0xD500             BPL.N    ??UART1_RX_TX_IRQHandler_1
    234              {
    235                  d = UART1->D;
   \   00000010   0x....             B.N      ?Subroutine1
    236                  s_scuart_data_sink_callback(d);
    237              }
    238          }
   \                     ??UART1_RX_TX_IRQHandler_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    239          
    240          #if (UART_INSTANCE_COUNT > 2U)
    241          /********************************************************************/
    242          /*
    243           * UART2 IRQ Handler
    244           *
    245           */
    246          

   \                                 In section .text, align 2, keep-with-next
    247          void UART2_RX_TX_IRQHandler(void)
    248          {
    249              if (UART2->S1 & UART_S1_RDRF_MASK)
   \                     UART2_RX_TX_IRQHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable6_9  ;; 0x4006c004
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x0689             LSLS     R1,R1,#+26
   \   00000006   0xD500             BPL.N    ??UART2_RX_TX_IRQHandler_0
    250              {
    251                  s_scuart_data_sink_callback(UART2->D);
   \   00000008   0x....             B.N      ?Subroutine1
    252              }
    253          }
   \                     ??UART2_RX_TX_IRQHandler_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return
    254          
    255          #if (UART_INSTANCE_COUNT > 3U)
    256          
    257          /********************************************************************/
    258          /*
    259           * UART3 IRQ Handler
    260           *
    261           */
    262          
    263          void UART3_RX_TX_IRQHandler(void)
    264          {
    265              if (UART3->S1 & UART_S1_RDRF_MASK)
    266              {
    267                  s_scuart_data_sink_callback(UART3->D);
    268              }
    269          }
    270          
    271          /********************************************************************/
    272          /*
    273           * UART4 IRQ Handler
    274           *
    275           */
    276          
    277          void UART4_RX_TX_IRQHandler(void)
    278          {
    279              if (UART4->S1 & UART_S1_RDRF_MASK)
    280              {
    281                  s_scuart_data_sink_callback(UART4->D);
    282              }
    283          }
    284          
    285          #if (UART_INSTANCE_COUNT > 5U)
    286          /********************************************************************/
    287          /*
    288           * UART5 IRQ Handler
    289           *
    290           */
    291          
    292          void UART5_RX_TX_IRQHandler(void)
    293          {
    294              if (UART5->S1 & UART_S1_RDRF_MASK)
    295              {
    296                  s_scuart_data_sink_callback(UART5->D);
    297              }
    298          }
    299          
    300          #endif // (UART_INSTANCE_COUNT > 5U)
    301          #endif // (UART_INSTANCE_COUNT > 3U)
    302          #endif // (UART_INSTANCE_COUNT > 2U)
    303          
    304          /********************************************************************/
    305          /*
    306           * Shutdown UART
    307           *
    308           * Parameters:
    309           *  uartch      the UART to shutdown
    310           *
    311           */

   \                                 In section .text, align 2, keep-with-next
    312          void scuart_shutdown (UART_Type * uartch)
    313          {
   \                     scuart_shutdown: (+1)
   \   00000000   0xB558             PUSH     {R3,R4,R6,LR}
    314              // In case uart peripheral isn't active which also means uart clock doesn't open,
    315              // So enable clocking to UARTx in any case, then we can write control register.
    316              switch((unsigned int)uartch)
   \   00000002   0x....             LDR.N    R1,??DataTable6_3  ;; 0x4006a000
   \   00000004   0x....             LDR.N    R6,??DataTable6_4  ;; 0x40048034
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xD006             BEQ.N    ??scuart_shutdown_0
   \   0000000C   0x....             LDR.N    R1,??DataTable6_5  ;; 0x4006b000
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD00A             BEQ.N    ??scuart_shutdown_1
   \   00000012   0x....             LDR.N    R1,??DataTable6_6  ;; 0x4006c000
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD00E             BEQ.N    ??scuart_shutdown_2
   \   00000018   0xE014             B.N      ??scuart_shutdown_3
    317              {
    318                  case (unsigned int)UART0:
    319                      NVIC_DisableIRQ(UART0_RX_TX_IRQn);
   \                     ??scuart_shutdown_0: (+1)
   \   0000001A   0x201F             MOVS     R0,#+31
   \   0000001C   0x.... 0x....      BL       NVIC_DisableIRQ
    320                      SIM_SET_SCGC4(SIM, SIM_SCGC4_UART0_MASK);
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0xF440 0x6080      ORR      R0,R0,#0x400
   \   00000026   0xE00C             B.N      ??scuart_shutdown_4
    321                      break;
    322                  case (unsigned int)UART1:
    323                      NVIC_DisableIRQ(UART1_RX_TX_IRQn);
   \                     ??scuart_shutdown_1: (+1)
   \   00000028   0x2021             MOVS     R0,#+33
   \   0000002A   0x.... 0x....      BL       NVIC_DisableIRQ
    324                      SIM_SET_SCGC4(SIM, SIM_SCGC4_UART1_MASK);
   \   0000002E   0x6830             LDR      R0,[R6, #+0]
   \   00000030   0xF440 0x6000      ORR      R0,R0,#0x800
   \   00000034   0xE005             B.N      ??scuart_shutdown_4
    325                      break;
    326          #if (UART_INSTANCE_COUNT > 2U)
    327                  case (unsigned int)UART2:
    328                      NVIC_DisableIRQ(UART2_RX_TX_IRQn);
   \                     ??scuart_shutdown_2: (+1)
   \   00000036   0x2023             MOVS     R0,#+35
   \   00000038   0x.... 0x....      BL       NVIC_DisableIRQ
    329                      SIM_SET_SCGC4(SIM, SIM_SCGC4_UART2_MASK);
   \   0000003C   0x6830             LDR      R0,[R6, #+0]
   \   0000003E   0xF440 0x5080      ORR      R0,R0,#0x1000
   \                     ??scuart_shutdown_4: (+1)
   \   00000042   0x6030             STR      R0,[R6, #+0]
    330                      break;
    331          #if (UART_INSTANCE_COUNT > 3U)
    332                  case (unsigned int)UART3:
    333                      NVIC_DisableIRQ(UART3_RX_TX_IRQn);
    334                      SIM_SET_SCGC4(SIM, SIM_SCGC4_UART3_MASK);
    335                      break;
    336                  case (unsigned int)UART4:
    337                      NVIC_DisableIRQ(UART4_RX_TX_IRQn);
    338                      SIM_SET_SCGC1(SIM, SIM_SCGC1_UART4_MASK);
    339                      break;
    340          #if (UART_INSTANCE_COUNT > 5U)
    341                  case (unsigned int)UART5:
    342                      NVIC_DisableIRQ(UART5_RX_TX_IRQn);
    343                      SIM_SET_SCGC1(SIM, SIM_SCGC1_UART5_MASK);
    344                      break;
    345          #endif
    346          #endif // (UART_INSTANCE_COUNT > 3U)
    347          #endif // (UART_INSTANCE_COUNT > 2U)
    348              }
    349          
    350              // Reset SCUART registers
    351              scuart_reset(uartch);
   \                     ??scuart_shutdown_3: (+1)
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       scuart_reset
    352          
    353              // Gate the uart clock.
    354              switch((unsigned int)uartch)
   \   0000004A   0x....             LDR.N    R0,??DataTable6_3  ;; 0x4006a000
   \   0000004C   0x4284             CMP      R4,R0
   \   0000004E   0xD006             BEQ.N    ??scuart_shutdown_5
   \   00000050   0x....             LDR.N    R0,??DataTable6_5  ;; 0x4006b000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD007             BEQ.N    ??scuart_shutdown_6
   \   00000056   0x....             LDR.N    R0,??DataTable6_6  ;; 0x4006c000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD008             BEQ.N    ??scuart_shutdown_7
   \   0000005C   0xBD51             POP      {R0,R4,R6,PC}
    355              {
    356                  case (unsigned int)UART0:
    357                      SIM_CLR_SCGC4(SIM, SIM_SCGC4_UART0_MASK);
   \                     ??scuart_shutdown_5: (+1)
   \   0000005E   0x6830             LDR      R0,[R6, #+0]
   \   00000060   0xF420 0x6080      BIC      R0,R0,#0x400
   \   00000064   0xE006             B.N      ??scuart_shutdown_8
    358                      break;
    359                  case (unsigned int)UART1:
    360                      SIM_CLR_SCGC4(SIM, SIM_SCGC4_UART1_MASK);
   \                     ??scuart_shutdown_6: (+1)
   \   00000066   0x6830             LDR      R0,[R6, #+0]
   \   00000068   0xF420 0x6000      BIC      R0,R0,#0x800
   \   0000006C   0xE002             B.N      ??scuart_shutdown_8
    361                      break;
    362          #if (UART_INSTANCE_COUNT > 2U)
    363                  case (unsigned int)UART2:
    364                      SIM_CLR_SCGC4(SIM, SIM_SCGC4_UART2_MASK);
   \                     ??scuart_shutdown_7: (+1)
   \   0000006E   0x6830             LDR      R0,[R6, #+0]
   \   00000070   0xF420 0x5080      BIC      R0,R0,#0x1000
   \                     ??scuart_shutdown_8: (+1)
   \   00000074   0x6030             STR      R0,[R6, #+0]
    365                      break;
    366          #if (UART_INSTANCE_COUNT > 3U)
    367                  case (unsigned int)UART3:
    368                      SIM_CLR_SCGC4(SIM, SIM_SCGC4_UART3_MASK);
    369                      break;
    370                  case (unsigned int)UART4:
    371                      SIM_CLR_SCGC1(SIM, SIM_SCGC1_UART4_MASK);
    372                      break;
    373          #if (UART_INSTANCE_COUNT > 5U)
    374                  case (unsigned int)UART5:
    375                      SIM_CLR_SCGC1(SIM, SIM_SCGC1_UART5_MASK);
    376                      break;
    377          #endif
    378          #endif // (UART_INSTANCE_COUNT > 3U)
    379          #endif // (UART_INSTANCE_COUNT > 2U)
    380              }
    381          }
   \   00000076   0xBD51             POP      {R0,R4,R6,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     s_scuart_data_sink_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x4006B004         DC32     0x4006b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x4006C004         DC32     0x4006c004
    382          
    383          #endif //BL_CONFIG_SCUART
    384          
    385          ////////////////////////////////////////////////////////////////////////////////
    386          // EOF
    387          ////////////////////////////////////////////////////////////////////////////////

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_DisableIRQ
       0   NVIC_EnableIRQ
       0   UART0_RX_TX_IRQHandler
         0   -- Indirect call
       0   UART1_RX_TX_IRQHandler
         0   -- Indirect call
       0   UART2_RX_TX_IRQHandler
         0   -- Indirect call
      24   scuart_init
        24   -> NVIC_EnableIRQ
       0   scuart_putchar
       0   scuart_reset
      16   scuart_shutdown
        16   -> NVIC_DisableIRQ
        16   -> scuart_reset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       8  ?Subroutine0
       8  ?Subroutine1
      10  NVIC_DisableIRQ
      12  NVIC_EnableIRQ
      12  UART0_RX_TX_IRQHandler
      20  UART1_RX_TX_IRQHandler
      12  UART2_RX_TX_IRQHandler
       4  s_scuart_data_sink_callback
     216  scuart_init
      10  scuart_putchar
      20  scuart_reset
     120  scuart_shutdown

 
   4 bytes in section .bss
 488 bytes in section .text
 
 488 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
